% Loads all threshold structures which are stored in .ini format like the
% ones generated by ThresholdSeriesV2. Use as:
% Array = LoadThresholdIni('Filename');, where
% Array is an array of all Threshold structures in the File
% Filename is the file (including directory and .ini affix) 
% containing the thresholds
% By Peter Steenbergen
% Version 1.0 12-05-2010

function ThresholdArray = LoadThresholdIni(Filename)


data = importdata(Filename);    % Location threshold-file

% Find the index at which each Threshold structure starts in the file.
% Each threshold is specified by a key, the name of which is contained in
% square brackets []. The index at which a Threshold structure starts is
% stored in the Offset array.

Offset = [];

for i=1:size(data,1)
    if size(data{i},2)~=0 % This skips the whitlines
        if data{i}(1)=='['
            Offset = [Offset i];
        end
    end
end

% We add the end of file index to Offset, need this later.
Offset = [Offset size(data,1)+1];


disp(Filename);
disp(['Contains ' int2str(size(Offset,2)-1) ' threshold structures.']);

% We count the elements of the Threshold structure using the starting index
% of the structure in Offset and the start of the next. This is why we need
% to add the end-of-file index in Offset. This looks a bit laborious, bit
% it allows for 1. new elements to be added to the threshold structures
% without having the change this script, and 2. for having different
% numbers of elements in different threshold structures in one file.

for i = 1:size(Offset,2)-1
    ThresholdArray(i).Header=data{Offset(i)}(2:size(data{Offset(i)},2)-1);
    for j=1:(Offset(i+1)-Offset(i))-1
        Index=Offset(i)+j;
        if size(data{Index},2)~=0 % This skips the whitlines
            Separator = find(data{Index}=='=');
            
            % Extract the label name of the current data line
            Label = data{Index}(1:Separator-1);
            % Count the array size
            Commas = find(data{Index}(Separator+1:size(data{Index},2))==',');
            % Create a format string for data conversion
            FormatString='%f';
            for k=1:size(Commas,2)
                FormatString = [FormatString ',%f'];
            end
            %data{Index}(Separator+1:size(data{Index},2))
            
            % Convert the data string to an array
            Value=[];
            Value = sscanf(data{Index}(Separator+1:size(data{Index},2)),FormatString);
            
            % Now create a variable "Label" with value "Value" in the current
            % Threshold structure
            eval(['ThresholdArray(i).' Label '=Value;'])
        end
    end
end
